name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'AKS cluster (for record only)'
        required: false
        default: 'sit722fa-aks'
      aks_resource_group:
        description: 'AKS resource group (for record only)'
        required: false
        default: 'sit722fa-rg'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ⛑️ Build kubeconfig from secret (no Azure login needed)
      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl version --client=true
          kubectl cluster-info

      # 🧱 Apply secrets/config and databases
      - name: Deploy backend infra (ConfigMaps, Secrets, DBs)
        run: |
          echo "Deploying backend infrastructure..."
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml        # must include acr-pull-secret
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      # 🧩 Deploy product & order services (Deployments + Services)
      - name: Deploy backend microservices
        run: |
          echo "Deploying backend microservices..."
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

      # ⏳ Wait for LoadBalancer IPs (up to ~5 minutes)
      - name: Wait for Backend LoadBalancer IPs
        id: wait_ips
        timeout-minutes: 6
        run: |
          echo "Waiting for Product and Order LB IPs..."
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            ORDER_IP=$(kubectl get svc order-service-w08e1   -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            echo "Attempt $i/60  PRODUCT_IP=${PRODUCT_IP:-<pending>}  ORDER_IP=${ORDER_IP:-<pending>}"
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP"     >> $GITHUB_ENV
              break
            fi
            sleep 5
          done

          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or both LoadBalancer IPs not assigned in time."
            kubectl get svc
            exit 1
          fi

      # 🔁 Expose IPs as workflow outputs
      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      # (Optional) Show final state
      - name: Show pods and services
        if: always()
        run: kubectl get pods,svc -o wide
